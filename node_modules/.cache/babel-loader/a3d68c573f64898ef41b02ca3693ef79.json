{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit'; // Or from '@reduxjs/toolkit/query/react'\n\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { employeeApi } from './api'; // import { pokemonApi } from './services/pokemon'\n\nexport const store = configureStore({\n  reducer: {\n    // Add the generated reducer as a specific top-level slice\n    [employeeApi.reducerPath]: employeeApi.reducer\n  },\n  // Adding the api middleware enables caching, invalidation, polling,\n  // and other useful features of `rtk-query`.\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(employeeApi.middleware)\n}); // optional, but required for refetchOnFocus/refetchOnReconnect behaviors\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\n\nsetupListeners(store.dispatch);","map":{"version":3,"names":["configureStore","setupListeners","employeeApi","store","reducer","reducerPath","middleware","getDefaultMiddleware","concat","dispatch"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/app/app.tsx"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\r\n// Or from '@reduxjs/toolkit/query/react'\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport { employeeApi } from './api'\r\n\r\n// import { pokemonApi } from './services/pokemon'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    // Add the generated reducer as a specific top-level slice\r\n    [employeeApi.reducerPath]: employeeApi.reducer,\r\n  },\r\n  // Adding the api middleware enables caching, invalidation, polling,\r\n  // and other useful features of `rtk-query`.\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(employeeApi.middleware),\r\n})\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch)\r\n\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B,C,CACA;;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,WAAT,QAA4B,OAA5B,C,CAEA;;AAEA,OAAO,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAClCI,OAAO,EAAE;IACP;IACA,CAACF,WAAW,CAACG,WAAb,GAA2BH,WAAW,CAACE;EAFhC,CADyB;EAKlC;EACA;EACAE,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,GAAGC,MAAvB,CAA8BN,WAAW,CAACI,UAA1C;AARgC,CAAD,CAA5B,C,CAWP;AACA;;AACAL,cAAc,CAACE,KAAK,CAACM,QAAP,CAAd"},"metadata":{},"sourceType":"module"}