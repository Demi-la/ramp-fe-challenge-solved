{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst TOTAL_TRANSACTIONS = 14;\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    if (paginatedTransactions === null) {\n      const response = await fetchWithCache(\"paginatedTransactions\", {\n        page: 0 // Always start from the first page\n\n      });\n      setPaginatedTransactions(response);\n    } else {\n      const currentPage = paginatedTransactions.nextPage;\n\n      if (currentPage !== null && currentPage < Math.ceil(TOTAL_TRANSACTIONS / TRANSACTIONS_PER_PAGE)) {\n        const response = await fetchWithCache(\"paginatedTransactions\", {\n          page: currentPage\n        });\n        setPaginatedTransactions(prevResponse => {\n          return {\n            nextPage: response.nextPage,\n            data: [...prevResponse.data, ...response.data]\n          };\n        });\n      }\n    }\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","TRANSACTIONS_PER_PAGE","TOTAL_TRANSACTIONS","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","currentPage","nextPage","Math","ceil","prevResponse","data","invalidateData"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\n\n\nconst TRANSACTIONS_PER_PAGE = 5\nconst TOTAL_TRANSACTIONS = 14\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    if (paginatedTransactions === null) {\n      const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n        \"paginatedTransactions\",\n        {\n          page: 0, // Always start from the first page\n        }\n      )\n\n      setPaginatedTransactions(response)\n    } else {\n      const currentPage = paginatedTransactions.nextPage\n\n      if (currentPage !== null && currentPage < Math.ceil(TOTAL_TRANSACTIONS / TRANSACTIONS_PER_PAGE)) {\n        const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n          \"paginatedTransactions\",\n          {\n            page: currentPage,\n          }\n        )\n\n        setPaginatedTransactions((prevResponse) => {\n          return {\n            nextPage: response.nextPage,\n            data: [...prevResponse.data, ...response.data],\n          }\n        })\n      }\n    }\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAIA,MAAMC,qBAAqB,GAAG,CAA9B;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BL,cAAc,EAAlD;EACA,MAAM,CAACM,qBAAD,EAAwBC,wBAAxB,IAAoDR,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,IAAIQ,qBAAqB,KAAK,IAA9B,EAAoC;MAClC,MAAMG,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;QACEM,IAAI,EAAE,CADR,CACW;;MADX,CAFmC,CAArC;MAOAH,wBAAwB,CAACE,QAAD,CAAxB;IACD,CATD,MASO;MACL,MAAME,WAAW,GAAGL,qBAAqB,CAACM,QAA1C;;MAEA,IAAID,WAAW,KAAK,IAAhB,IAAwBA,WAAW,GAAGE,IAAI,CAACC,IAAL,CAAUZ,kBAAkB,GAAGD,qBAA/B,CAA1C,EAAiG;QAC/F,MAAMQ,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;UACEM,IAAI,EAAEC;QADR,CAFmC,CAArC;QAOAJ,wBAAwB,CAAEQ,YAAD,IAAkB;UACzC,OAAO;YACLH,QAAQ,EAAEH,QAAQ,CAACG,QADd;YAELI,IAAI,EAAE,CAAC,GAAGD,YAAY,CAACC,IAAjB,EAAuB,GAAGP,QAAQ,CAACO,IAAnC;UAFD,CAAP;QAID,CALuB,CAAxB;MAMD;IACF;EACF,CA7B2B,EA6BzB,CAACZ,cAAD,EAAiBE,qBAAjB,CA7ByB,CAA5B;EA+BA,MAAMW,cAAc,GAAGnB,WAAW,CAAC,MAAM;IACvCS,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAES,IAAI,EAAEV,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDS;EAAlD,CAAP;AACD;;GA1Ced,wB;UACsBH,c"},"metadata":{},"sourceType":"module"}