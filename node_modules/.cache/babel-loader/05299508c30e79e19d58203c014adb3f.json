{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const [SelectedEmployees, setSelectedEmployees] = useState;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          try {\n            if (newValue === null) {\n              setSelectedEmployees([]); // Optionally, call loadTransactionsByEmployee here if needed\n\n              return;\n            }\n\n            if (newValue.id === \"\") {\n              setSelectedEmployees(\"all\"); // Optionally, handle loading all transactions here\n            } else {\n              const updatedSelectedEmployees = selectedEmployees.includes(newValue.id) ? selectedEmployees.filter(id => id !== newValue.id) : [...selectedEmployees, newValue.id];\n              setSelectedEmployees(updatedSelectedEmployees); // Optionally, call loadTransactionsByEmployee here for individual employee\n            }\n          } catch (error) {\n            console.error(\"Error:\", error);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"yXHk/2qvl++XLkP2SZkJsf+Vph0=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","SelectedEmployees","setSelectedEmployees","item","value","id","label","firstName","lastName","newValue","updatedSelectedEmployees","selectedEmployees","includes","filter","error","console"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const [SelectedEmployees, setSelectedEmployees] = useState \n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<SelectedEmployees>\n  isLoading={isLoading}\n  defaultValue={EMPTY_EMPLOYEE}\n  items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n  label=\"Filter by employee\"\n  loadingLabel=\"Loading employees\"\n  parseItem={(item) => ({\n    value: item.id,\n    label: `${item.firstName} ${item.lastName}`,\n  })}\n  onChange={async (newValue) => {\n    try {\n      if (newValue === null) {\n        setSelectedEmployees([]);\n        // Optionally, call loadTransactionsByEmployee here if needed\n        return;\n      }\n\n      if (newValue.id === \"\") {\n        setSelectedEmployees(\"all\");\n        // Optionally, handle loading all transactions here\n      } else {\n        const updatedSelectedEmployees = selectedEmployees.includes(newValue.id)\n          ? selectedEmployees.filter((id) => id !== newValue.id)\n          : [...selectedEmployees, newValue.id];\n        setSelectedEmployees(updatedSelectedEmployees);\n        // Optionally, call loadTransactionsByEmployee here for individual employee\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  }}\n        />\n\n{/* onChange={async (newValue) => {\n            try {\n              if (newValue === null) {\n                await loadTransactionsByEmployee(newValue.id);\n                \n              } \n            } catch (error) {\n              console.error(\"Error:\", error);\n            }\n          }} */}\n\n{/* onChange={async (newValue) => {\n            try{\n            if (newValue === null) {\n               await loadTransactionsByEmployee(newValue.id);\n            } else if (newValue.newValue === \"all\") {\n              // Handle \"All Employees\" selection if needed\n            } else {\n              // Perform necessary state updates for employee selection here\n            } }catch (error) {\n              console.error(\"Error:\", error);\n            }\n          }} */}\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}