{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nimport { useGetEmployeeQuery } from \"src/app/api\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    data,\n    isError,\n    isLoading\n  } = useGetEmployeeQuery({\n    id: \"89bd9324-04e0-4cd6-aa27-981508bd219f\",\n    firstName: \"hello\",\n    lastName: \"maria\"\n  });\n  console.log(\"this is my new data: \", data);\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      const previousData = response.data;\n      const currentData = previousResponse.data;\n      const combinedArray = [...currentData, ...previousData];\n      console.log(response.nextPage);\n      console.log({\n        data: combinedArray,\n        nextPage: response.nextPage\n      });\n      return {\n        data: combinedArray,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"c7xFWc0e5+DR9khAoLLFHomM7gU=\", false, function () {\n  return [useGetEmployeeQuery, useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useGetEmployeeQuery","usePaginatedTransactions","data","isError","isLoading","id","firstName","lastName","console","log","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","previousData","currentData","combinedArray","invalidateData"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { useGetEmployeeQuery } from \"src/app/api\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { data, isError, isLoading } = useGetEmployeeQuery({\n    id: \"89bd9324-04e0-4cd6-aa27-981508bd219f\",\n    firstName: \"hello\",\n    lastName: \"maria\",\n  })\n\n  console.log(\"this is my new data: \",data)\n\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n      const previousData = response.data;\n      const currentData = previousResponse.data;\n      \n      const combinedArray = [...currentData, ...previousData];\n      console.log(response.nextPage);\n      \n      console.log({ data: combinedArray, nextPage: response.nextPage });\n\n      return { data: combinedArray, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,mBAAT,QAAoC,aAApC;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,IAAF;IAAQC,OAAR;IAAiBC;EAAjB,IAA+BJ,mBAAmB,CAAC;IACvDK,EAAE,EAAE,sCADmD;IAEvDC,SAAS,EAAE,OAF4C;IAGvDC,QAAQ,EAAE;EAH6C,CAAD,CAAxD;EAMAC,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCP,IAApC;EAEA,MAAM;IAAEQ,cAAF;IAAkBC;EAAlB,IAA8BZ,cAAc,EAAlD;EACA,MAAM,CAACa,qBAAD,EAAwBC,wBAAxB,IAAoDf,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMgB,QAAQ,GAAGjB,WAAW,CAAC,YAAY;IACvC,MAAMkB,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MACD,MAAMI,YAAY,GAAGJ,QAAQ,CAACb,IAA9B;MACA,MAAMkB,WAAW,GAAGF,gBAAgB,CAAChB,IAArC;MAEA,MAAMmB,aAAa,GAAG,CAAC,GAAGD,WAAJ,EAAiB,GAAGD,YAApB,CAAtB;MACAX,OAAO,CAACC,GAAR,CAAYM,QAAQ,CAACE,QAArB;MAEAT,OAAO,CAACC,GAAR,CAAY;QAAEP,IAAI,EAAEmB,aAAR;QAAuBJ,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAZ;MAEA,OAAO;QAAEf,IAAI,EAAEmB,aAAR;QAAuBJ,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAP;IACD,CAbuB,CAAxB;EAcD,CAtB2B,EAsBzB,CAACP,cAAD,EAAiBE,qBAAjB,CAtByB,CAA5B;EAwBA,MAAMU,cAAc,GAAGzB,WAAW,CAAC,MAAM;IACvCgB,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEX,IAAI,EAAEU,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDQ;EAAlD,CAAP;AACD;;GA3CerB,wB;UACuBD,mB,EAQDD,c"},"metadata":{},"sourceType":"module"}