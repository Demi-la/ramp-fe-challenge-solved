{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst TOTAL_TRANSACTION = 15;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n  const total = end + TOTAL_TRANSACTION;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  const allTransaction = total;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end, total)\n  };\n}; // export const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n//   if (!employeeId) {\n//     throw new Error(\"Employee id cannot be empty\")\n//   }\n//   return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n// }\n\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId || employeeId.length === 0) {\n    throw new Error(\"Employee ids cannot be empty\");\n  }\n\n  if (employeeId.includes(\"all\")) {\n    return data.transactions; // Return all transactions if \"all\" is selected\n  }\n\n  return data.transactions.filter(transaction => employeeId.includes(transaction.employee.id));\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","TOTAL_TRANSACTION","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","total","length","nextPage","allTransaction","slice","getTransactionsByEmployee","employeeId","includes","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\nconst TOTAL_TRANSACTION = 15\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n  const total = end + TOTAL_TRANSACTION\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n  const allTransaction = total \n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end, total),\n  }\n}\n\n// export const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n//   if (!employeeId) {\n//     throw new Error(\"Employee id cannot be empty\")\n//   }\n  \n\n//   return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n// }\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId || employeeId.length === 0) {\n    throw new Error(\"Employee ids cannot be empty\");\n  } \n\n  if (employeeId.includes(\"all\")) {\n    return data.transactions; // Return all transactions if \"all\" is selected\n  }\n\n  return data.transactions.filter((transaction) => employeeId.includes(transaction.employee.id));\n};\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AACA,MAAMC,iBAAiB,GAAG,EAA1B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEJ,QAAQ,CAACI,SAD+C;EAEnEC,YAAY,EAAEL,QAAQ,CAACK;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGP,qBAArB;EACA,MAAMU,GAAG,GAAGD,KAAK,GAAGT,qBAApB;EACA,MAAMW,KAAK,GAAGD,GAAG,GAAGT,iBAApB;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBQ,MAA9B,EAAsC;IACpC,MAAM,IAAIJ,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMM,QAAQ,GAAGH,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBQ,MAAxB,GAAiCL,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EACA,MAAMO,cAAc,GAAGH,KAAvB;EAEA,OAAO;IACLE,QADK;IAELX,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBW,KAAlB,CAAwBN,KAAxB,EAA+BC,GAA/B,EAAoCC,KAApC;EAFD,CAAP;AAID,CAtBM,C,CAwBP;AACA;AACA;AACA;AAGA;AACA;;AAEA,OAAO,MAAMK,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAD,IAAeA,UAAU,CAACL,MAAX,KAAsB,CAAzC,EAA4C;IAC1C,MAAM,IAAIJ,KAAJ,CAAU,8BAAV,CAAN;EACD;;EAED,IAAIS,UAAU,CAACC,QAAX,CAAoB,KAApB,CAAJ,EAAgC;IAC9B,OAAOhB,IAAI,CAACE,YAAZ,CAD8B,CACJ;EAC3B;;EAED,OAAOF,IAAI,CAACE,YAAL,CAAkBe,MAAlB,CAA0BC,WAAD,IAAiBH,UAAU,CAACC,QAAX,CAAoBE,WAAW,CAACC,QAAZ,CAAqBC,EAAzC,CAA1C,CAAP;AACD,CAVM;AAYP,OAAO,MAAMC,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGlB,IAAI,CAACE,YAAL,CAAkBsB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;;EAIA,IAAI,CAACJ,WAAL,EAAkB;IAChB,MAAM,IAAIZ,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDY,WAAW,CAACQ,QAAZ,GAAuBH,KAAvB;AACD,CAVM"},"metadata":{},"sourceType":"module"}