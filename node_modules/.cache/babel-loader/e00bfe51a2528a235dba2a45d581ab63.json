{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\"; // Define TypeScript types for query parameters and response\n\n// Define a service using a base URL and expected endpoints\nexport const employeeApi = createApi({\n  reducerPath: \"employeeApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"../mock-data.json\"\n  }),\n  endpoints: builder => ({\n    getEmployee: builder.query({\n      query: _ref => {\n        let {\n          id,\n          firstName,\n          lastName\n        } = _ref;\n        return {\n          method: \"GET\",\n          params: {\n            id,\n            firstName,\n            lastName\n          }\n        };\n      }\n    })\n  })\n}); // Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\n\nexport const {\n  useGetEmployeeQuery\n} = employeeApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","employeeApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getEmployee","query","id","firstName","lastName","method","params","useGetEmployeeQuery"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/app/api.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\"\r\n\r\n// Define TypeScript types for query parameters and response\r\ntype EmployeeQueryParams = {\r\n  id: number\r\n  firstName: string\r\n  lastName: string\r\n}\r\n\r\ntype EmployeeResponse = {\r\n  // Define your response data types here\r\n  // For example:\r\n  id: number\r\n  firstName: string\r\n  lastName: string\r\n}\r\n\r\n// Define a service using a base URL and expected endpoints\r\nexport const employeeApi = createApi({\r\n  reducerPath: \"employeeApi\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: \"../mock-data.json\" }),\r\n  endpoints: (builder) => ({\r\n    getEmployee: builder.query<EmployeeResponse, EmployeeQueryParams>({\r\n      query: ({ id, firstName, lastName }) => ({\r\n        method: \"GET\",\r\n        params: { id, firstName, lastName },\r\n      }),\r\n    }),\r\n  }),\r\n})\r\n\r\n// Export hooks for usage in functional components, which are\r\n// auto-generated based on the defined endpoints\r\nexport const { useGetEmployeeQuery } = employeeApi\r\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C,C,CAEA;;AAeA;AACA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAAC;EACnCG,WAAW,EAAE,aADsB;EAEnCC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAX,CAAD,CAFU;EAGnCC,SAAS,EAAGC,OAAD,KAAc;IACvBC,WAAW,EAAED,OAAO,CAACE,KAAR,CAAqD;MAChEA,KAAK,EAAE;QAAA,IAAC;UAAEC,EAAF;UAAMC,SAAN;UAAiBC;QAAjB,CAAD;QAAA,OAAkC;UACvCC,MAAM,EAAE,KAD+B;UAEvCC,MAAM,EAAE;YAAEJ,EAAF;YAAMC,SAAN;YAAiBC;UAAjB;QAF+B,CAAlC;MAAA;IADyD,CAArD;EADU,CAAd;AAHwB,CAAD,CAA7B,C,CAaP;AACA;;AACA,OAAO,MAAM;EAAEG;AAAF,IAA0Bb,WAAhC"},"metadata":{},"sourceType":"module"}