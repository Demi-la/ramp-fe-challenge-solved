{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions(TOTAL_TRANSACTION) {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      const previousData = response.data;\n      const currentData = previousResponse.data;\n      const combinedArray = [...currentData, ...previousData];\n      const nextPage = response.nextPage; // Check if nextPage is not null and if the combinedArray length reaches the total transactions\n\n      if (nextPage === null || combinedArray.length >= TOTAL_TRANSACTION) {\n        return null; // Set paginatedTransactions to null to hide the button\n      }\n\n      console.log({\n        data: combinedArray,\n        nextPage: response.nextPage\n      });\n      return {\n        data: combinedArray,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n} // idjfnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","TOTAL_TRANSACTION","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","page","nextPage","previousResponse","previousData","data","currentData","combinedArray","length","console","log","invalidateData"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(TOTAL_TRANSACTION: number): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n      const previousData = response.data;\n      const currentData = previousResponse.data;\n      \n      const combinedArray = [...currentData, ...previousData];\n\n      const nextPage = response.nextPage\n\n      // Check if nextPage is not null and if the combinedArray length reaches the total transactions\n      if (nextPage === null || combinedArray.length >= TOTAL_TRANSACTION) {\n        return null // Set paginatedTransactions to null to hide the button\n      }\n      console.log({ data: combinedArray, nextPage: response.nextPage })\n      \n\n      return { data: combinedArray, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n\n\n// idjfnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,CAAkCC,iBAAlC,EAA0F;EAAA;;EAC/F,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BJ,cAAc,EAAlD;EACA,MAAM,CAACK,qBAAD,EAAwBC,wBAAxB,IAAoDP,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,YAAY;IACvC,MAAMU,QAAQ,GAAG,MAAML,cAAc,CACnC,uBADmC,EAEnC;MACEM,IAAI,EAAEJ,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACK;IADnE,CAFmC,CAArC;IAOAJ,wBAAwB,CAAEK,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOH,QAAP;MACD;;MACD,MAAMI,YAAY,GAAGJ,QAAQ,CAACK,IAA9B;MACA,MAAMC,WAAW,GAAGH,gBAAgB,CAACE,IAArC;MAEA,MAAME,aAAa,GAAG,CAAC,GAAGD,WAAJ,EAAiB,GAAGF,YAApB,CAAtB;MAEA,MAAMF,QAAQ,GAAGF,QAAQ,CAACE,QAA1B,CAT6C,CAW7C;;MACA,IAAIA,QAAQ,KAAK,IAAb,IAAqBK,aAAa,CAACC,MAAd,IAAwBd,iBAAjD,EAAoE;QAClE,OAAO,IAAP,CADkE,CACtD;MACb;;MACDe,OAAO,CAACC,GAAR,CAAY;QAAEL,IAAI,EAAEE,aAAR;QAAuBL,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAZ;MAGA,OAAO;QAAEG,IAAI,EAAEE,aAAR;QAAuBL,QAAQ,EAAEF,QAAQ,CAACE;MAA1C,CAAP;IACD,CAnBuB,CAAxB;EAoBD,CA5B2B,EA4BzB,CAACP,cAAD,EAAiBE,qBAAjB,CA5ByB,CAA5B;EA8BA,MAAMc,cAAc,GAAGrB,WAAW,CAAC,MAAM;IACvCQ,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDY;EAAlD,CAAP;AACD,C,CAGD;;GA5CgBlB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}