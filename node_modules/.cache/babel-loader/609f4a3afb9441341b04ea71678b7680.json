{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\"; // export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState({\n    data: null,\n    nextPage: null\n  });\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: (_paginatedTransaction = paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      }\n\n      const previousData = response.data;\n      const currentData = previousResponse.data;\n      const combinedArray = [...currentData, ...previousData];\n      console.log({\n        data: combinedArray,\n        nextPage: response.nextPage\n      });\n      return {\n        data: combinedArray,\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"Z7ThmoV9nIzHmN/zYnN9mY4NeOM=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","data","nextPage","fetchAll","response","page","previousResponse","previousData","currentData","combinedArray","console","log","invalidateData"],"sources":["C:/Users/User/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<\n    PaginatedResponse<Transaction[] | null>\n  >({\n    data: null,\n    nextPage: null,\n  })\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions.nextPage ?? 0,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n      const previousData = response.data\n      const currentData = previousResponse.data\n\n      const combinedArray = [...currentData, ...previousData]\n      console.log({ data: combinedArray, nextPage: response.nextPage })\n\n      return { data: combinedArray, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAEhE;IACAO,IAAI,EAAE,IADN;IAEAC,QAAQ,EAAE;EAFV,CAFgE,CAAlE;EAOA,MAAMC,QAAQ,GAAGV,WAAW,CAAC,YAAY;IAAA;;IACvC,MAAMW,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MACEQ,IAAI,2BAAEN,qBAAqB,CAACG,QAAxB,yEAAoC;IAD1C,CAFmC,CAArC;IAOAF,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIF,QAAQ,KAAK,IAAb,IAAqBE,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOF,QAAP;MACD;;MACD,MAAMG,YAAY,GAAGH,QAAQ,CAACH,IAA9B;MACA,MAAMO,WAAW,GAAGF,gBAAgB,CAACL,IAArC;MAEA,MAAMQ,aAAa,GAAG,CAAC,GAAGD,WAAJ,EAAiB,GAAGD,YAApB,CAAtB;MACAG,OAAO,CAACC,GAAR,CAAY;QAAEV,IAAI,EAAEQ,aAAR;QAAuBP,QAAQ,EAAEE,QAAQ,CAACF;MAA1C,CAAZ;MAEA,OAAO;QAAED,IAAI,EAAEQ,aAAR;QAAuBP,QAAQ,EAAEE,QAAQ,CAACF;MAA1C,CAAP;IACD,CAXuB,CAAxB;EAYD,CApB2B,EAoBzB,CAACL,cAAD,EAAiBE,qBAAjB,CApByB,CAA5B;EAsBA,MAAMa,cAAc,GAAGnB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEC,IAAI,EAAEF,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDS;EAAlD,CAAP;AACD;;GApCehB,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}